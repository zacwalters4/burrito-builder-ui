{"version":3,"sources":["components/Orders/Orders.js","components/OrderForm/OrderForm.js","apiCalls.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Orders","props","orderEls","orders","map","order","index","className","key","id","name","ingredients","ingredient","length","OrderForm","handleSubmit","e","state","fetch","method","headers","body","JSON","stringify","Date","now","clearInputs","handleIngredientChange","preventDefault","console","log","target","setState","handleNameChange","value","ingredientButtons","onClick","type","placeholder","this","onChange","join","Component","App","then","response","json","data","catch","err","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAwBeA,G,YArBA,SAAAC,GACb,IAAMC,EAAWD,EAAME,OAAOC,KAAI,SAACC,EAAOC,GACxC,OACE,yBAAKC,UAAU,QAAQC,IAAKF,EAAOG,GAAIH,GACrC,4BAAKD,EAAMK,MACX,wBAAIH,UAAU,mBACXF,EAAMM,YAAYP,KAAI,SAACQ,EAAYN,GAClC,OAAO,wBAAIE,IAAKF,GAAQM,WAOlC,OACE,iCACIV,EAASW,OAASX,EAAW,gD,OCmDtBY,E,kDAlEb,WAAYb,GAAQ,IAAD,8BACjB,gBASFc,aAAe,SAAAC,GCTQ,IAACN,EAAMC,EAAND,EDUZ,EAAKO,MAAMP,KCVOC,EDUD,EAAKM,MAAMN,YCTxCO,MAAM,sCAAuC,CAC3CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACb,KAAMA,EAAMC,YAAaA,EAAaF,GAAIe,KAAKC,QDKrE,EAAKC,eAZY,EAenBC,uBAAyB,SAACX,GACxBA,EAAEY,iBACFC,QAAQC,IAAId,EAAEe,OAAOrB,MACrB,EAAKsB,SAAS,CACZrB,YAAY,GAAD,mBAAM,EAAKM,MAAMN,aAAjB,CAA8BK,EAAEe,OAAOrB,UAnBnC,EAuBnBuB,iBAAmB,SAACjB,GAClB,EAAKgB,SAAL,eACGhB,EAAEe,OAAOrB,KAAO,CAACM,EAAEe,OAAOG,UAzBZ,EA6BnBR,YAAc,WACZ,EAAKM,SAAS,CAACtB,KAAM,GAAIC,YAAa,MA5BtC,EAAKV,MAAQA,EACb,EAAKgB,MAAQ,CACXP,KAAM,GACNC,YAAa,IALE,E,0CAiCnB,WAAU,IAAD,OAEDwB,EADsB,CAAC,QAAS,QAAS,WAAY,WAAY,UAAW,eAAgB,gBAAiB,YAAa,YAAa,YAAa,WAAY,cACxH/B,KAAI,SAAAQ,GAChD,OACE,4BAAQJ,IAAKI,EAAYF,KAAME,EAAYwB,QAAS,SAAApB,GAAC,OAAI,EAAKW,uBAAuBX,KAClFJ,MAKP,OACE,8BACE,2BACEyB,KAAK,OACLC,YAAY,OACZ5B,KAAK,OACLwB,MAAOK,KAAKtB,MAAMP,KAClB8B,SAAU,SAAAxB,GAAC,OAAI,EAAKiB,iBAAiBjB,MAGrCmB,EAEF,qCAAYI,KAAKtB,MAAMN,YAAY8B,KAAK,OAAS,qBAC1B,KAApBF,KAAKtB,MAAMP,MAAkD,IAAlC6B,KAAKtB,MAAMN,YAAYE,SAAmB,iEACrE0B,KAAKtB,MAAMP,KAAKG,OAAS,GAAK0B,KAAKtB,MAAMN,YAAYE,OAAS,GACjE,4BAAQuB,QAAS,SAAApB,GAAC,OAAI,EAAKD,aAAaC,KAAxC,qB,GA3DgB0B,aEmCTC,E,kDA/Bb,WAAY1C,GAAQ,IAAD,8BACjB,gBACKgB,MAAQ,CACXd,OAAQ,IAHO,E,qDAOnB,WAAsB,IAAD,ODbde,MAAM,uCACR0B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCe1BF,MAAK,SAAAG,GACJ,EAAKf,SAAS,CAAC7B,OAAO,YAAK4C,EAAK5C,aAEjC6C,OAAM,SAAAC,GAAG,OAAIpB,QAAQqB,MAAM,kBAAmBD,Q,oBAGnD,WACE,OACE,0BAAM1C,UAAU,OACd,gCACE,+CACA,kBAAC,EAAD,OAGF,kBAAC,EAAD,CAAQJ,OAAQoC,KAAKtB,MAAMd,c,GAzBjBuC,aCMES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.99702e83.chunk.js","sourcesContent":["import React from 'react';\nimport './Orders.css';\n\nconst Orders = props => {\n  const orderEls = props.orders.map((order, index) => {\n    return (\n      <div className=\"order\" key={index} id={index}>\n        <h3>{order.name}</h3>\n        <ul className=\"ingredient-list\">\n          {order.ingredients.map((ingredient, index) => {\n            return <li key={index}>{ingredient}</li>\n          })}\n        </ul>\n      </div>\n    )\n  });\n\n  return (\n    <section>\n      { orderEls.length ? orderEls : <p>No orders yet!</p> }\n    </section>\n  )\n}\n\nexport default Orders;","import React, { Component } from 'react';\nimport { postOrder } from '../../apiCalls';\n\nclass OrderForm extends Component {\n  constructor(props) {\n    super();\n    this.props = props;\n    this.state = {\n      name: '',\n      ingredients: []\n    };\n  }\n\n\n  handleSubmit = e => {\n    postOrder(this.state.name, this.state.ingredients)\n    this.clearInputs();\n  }\n\n  handleIngredientChange = (e) => {\n    e.preventDefault()\n    console.log(e.target.name)\n    this.setState({\n      ingredients: [...this.state.ingredients, e.target.name]\n    })\n  }\n\n  handleNameChange = (e) => {\n    this.setState({\n      [e.target.name]: [e.target.value]\n    })\n  }\n\n  clearInputs = () => {\n    this.setState({name: '', ingredients: []});\n  }\n\n  render() {\n    const possibleIngredients = ['beans', 'steak', 'carnitas', 'sofritas', 'lettuce', 'queso fresco', 'pico de gallo', 'hot sauce', 'guacamole', 'jalapenos', 'cilantro', 'sour cream'];\n    const ingredientButtons = possibleIngredients.map(ingredient => {\n      return (\n        <button key={ingredient} name={ingredient} onClick={e => this.handleIngredientChange(e)}>\n          {ingredient}\n        </button>\n      )\n    });\n\n    return (\n      <form>\n        <input\n          type='text'\n          placeholder='Name'\n          name='name'\n          value={this.state.name}\n          onChange={e => this.handleNameChange(e)}\n        />\n\n        { ingredientButtons }\n\n        <p>Order: { this.state.ingredients.join(', ') || 'Nothing selected' }</p>\n        {((this.state.name === '' || (this.state.ingredients.length === 0))) && <p>Ingredients and Name are required!</p>}\n        {((this.state.name.length > 0 && this.state.ingredients.length > 0)) && \n        <button onClick={e => this.handleSubmit(e)}>\n          Submit Order\n        </button>}\n      </form>\n    )\n  }\n}\n\nexport default OrderForm;\n","export const getOrders = () => {\n  return fetch('http://localhost:3001/api/v1/orders')\n      .then(response => response.json())\n}\n\nexport const postOrder = (name, ingredients) => {\n  fetch(\"http://localhost:3001/api/v1/orders\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({name: name, ingredients: ingredients, id: Date.now}) \n      \n  ,\n  });\n\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {getOrders} from '../../apiCalls';\nimport Orders from '../../components/Orders/Orders';\nimport OrderForm from '../../components/OrderForm/OrderForm';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      orders: []\n    }\n  }\n\n  componentDidMount()  {\n\n    getOrders()\n      .then(data => {\n        this.setState({orders: [...data.orders]})\n      })\n      .catch(err => console.error('Error fetching:', err));\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <header>\n          <h1>Burrito Builder</h1>\n          <OrderForm />\n        </header>\n\n        <Orders orders={this.state.orders}/>\n      </main>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}